#############MakeFile.env########

include $(TOPDIR)/makefileinc.env

MAKE=make
#CC = arm-linux-gcc
#CXX = arm-linux-g++
#AR = arm-linux-ar
RM = rm -fr

MKDIR = mkdir -p

//CFLAGS += -Wall
//CPPFLAGS += -Wall 

ifneq ($(SHAREDLIBV),)
	LDFLAGS += -shared -fpic
endif


OBJDIR = $(TOPDIR)/build/objects
OUTDIR = $(TOPDIR)/build/outs

dirs := $(shell find . -maxdepth 1 -type d)
dirs := $(basename $(patsubst ./%,%,$(dirs)))
dirs := $(filter-out $(exclude_dirs),$(dirs))
dirs := $(filter-out $(project_dirs),$(dirs))

SUBDIRS += $(dirs)
SUBDIRS += $(project_dirs)

SRCS = $(wildcard *.c)
SRCS += $(wildcard *.cpp)

OBJS = $(patsubst %.c,$(OBJDIR)/%.o,$(patsubst %.cpp,$(OBJDIR)/%.o,$(SRCS)))

DEPENDS = $(patsubst %.c,$(OBJDIR)/%.d,$(patsubst %.cpp,$(OBJDIR)/%.d,$(SRCS)))

CLEANDEPENDS = $(DEPENDS:.d=.d*)

all: $(OBJDIR) $(OUTDIR) $(OUTDIR)/$(TARGETV) $(OUTDIR)/$(SHAREDLIBV) $(OUTDIR)/$(LIB) $(BUILDOBJ) subdirs

$(OBJDIR):
	@echo will create $@
	@test -d $@ || $(MKDIR) $@
	@echo create $@ ok

$(OUTDIR):
	@echo will create $@
	@test -d $@ || $(MKDIR) $@
	@echo create $@ ok



$(OUTDIR)/$(LIB):$(OBJS)
ifneq ($(LIB),)
	$(AR) rv $@ $^
	ranlib $@
endif



$(OUTDIR)/$(TARGETV):$(OBJS) $(AutoNeedAppLib)
ifneq ($(TARGETV),)
	$(CXX) -o $@ $^ $(LDFLAGS)
endif



ALLOBJS = $(wildcard $(OBJDIR)/*.o)
ifneq ($(SHAREDLIBV),)
$(OUTDIR)/$(SHAREDLIBV):$(OBJS) $(AutoNeedAppLib)
	$(CXX) $(ALLOBJS) -o $@ $(LDFLAGS)
endif

#$(BUILDOBJ):$(OBJS)
#ifneq ($(BUILDOBJ),)
#	@echo create $(OBJS)
#endif

subdirs:$(SUBDIRS)
	for dir in $(SUBDIRS);\
	do $(MAKE) -C $$dir all || exit 1;\
	done

#$(OBJS):$(OBJDIR)/%.o

$(OBJDIR)/%.o: %.c
	$(CC) -c $< -o $@ $(CFLAGS) $(INCS) -D CURRENTVERSION=\"$(VERSIONSTR)\"
	@echo $(CC)

$(OBJDIR)/%.o: %.cpp
	$(CXX) -c $< -o $@ $(CPPFLAGS) $(INCS) -D CURRENTVERSION=\"$(VERSIONSTR)\"
	@echo $(CXX)	


-include $(DEPENDS)

$(OBJDIR)/%.d:%.c
	@test -d $(OBJDIR) || $(MKDIR) $(OBJDIR)\
	set -e; rm -f $@; \
	$(CC) -MM $(CFLAGS) $(INCS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[:]*,$(OBJDIR)/\1.o $@:,g' < $@.$$$$ > $@; \
	rm $@.$$$$

$(OBJDIR)/%.d:%.cpp
	@test -d $(OBJDIR) || $(MKDIR) $(OBJDIR)
	set -e; rm -f $@; \
	$(CXX) -MM $(CPPFLAGS) $(INCS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[:]*,$(OBJDIR)/\1.o $@:,g' < $@.$$$$ > $@; \
	rm $@.$$$$

clean:
	for dir in $(SUBDIRS);\
	do $(MAKE) -C $$dir clean||exit 1;\
	done
	$(RM) $(OBJS) $(DEPENDS) $(CLEANDEPENDS)
ifneq ($(TARGETV),)
	$(RM) $(OUTDIR)/$(TARGETV)*
endif
ifneq ($(LIB),)
	$(RM) $(OUTDIR)/$(LIB)
endif
ifneq ($(SHAREDLIBV),)
	$(RM) $(OUTDIR)/$(SHAREDLIB)*
	$(RM) $(OUTDIR)/oopcommon
	@sudo $(RM) $(SDKTARGETSYSROOT)/usr/lib/$(SHAREDLIB)*
	@sudo $(RM) $(SDKTARGETSYSROOT)/usr/include/oopcommon
endif

testdir := $(filter -I%,$(INCS))
testdir := $(subst -I,,$(testdir))


install:	
	for dir in $(SUBDIRS);\
	do $(MAKE) -C $$dir install||exit 1;\
	done
ifneq ($(SHAREDLIBV),)
	$(RM) $(OUTDIR)/oopcommon/*
	@echo $(testdir)
	@test -d $(OUTDIR)/oopcommon || $(MKDIR) $(OUTDIR)/oopcommon
	for dir in $(testdir); do \
	echo $$dir;\
	cp -f $$dir/*.h $(OUTDIR)/oopcommon;\
	done
	@ln -sf $(SHAREDLIBV) $(OUTDIR)/$(SHAREDLIB)
ifneq ($(SDKTARGETSYSROOT),)
	@sudo cp -af $(OUTDIR)/$(SHAREDLIB)* $(SDKTARGETSYSROOT)/usr/lib
	@sudo cp -afr $(OUTDIR)/oopcommon $(SDKTARGETSYSROOT)/usr/include
endif	
endif	
